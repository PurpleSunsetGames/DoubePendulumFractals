// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float Resolutionx;
float Resolutiony;

float Time;
float Timestep;
float StartVel1;
float StartVel2;
float Leng1;
float Leng2;
float Mass1;
float Mass2;
float g;
float Friction;

int XAxisType;
int YAxisType;

float4 Iterat(float4 z)
{
    float theta1 = z[0];
    float theta2 = z[1];
    float w1 = z[2];
    float w2 = z[3];

    float2 a = float2((Leng2 / Leng1) * (Mass2 / (Mass1 + Mass2)) * cos(theta1 - theta2),
                      (Leng1 / Leng2) * cos(theta1 - theta2));
    float2 f = float2(-(Leng2 / Leng1) * (Mass2 / (Mass1 + Mass2)) * (w2*w2) * sin(theta1 - theta2) - ((g / Leng1) * sin(theta1)),
                       (Leng1 / Leng2) * (w1*w1) * sin(theta1 - theta2) - ((g/Leng2) * sin(theta2)));
    float g1 = (f[0] - (a[0] * f[1])) / (1 - (a[0] * a[1]));
    float g2 = (-(a[1] * f[0]) + f[1]) / (1 - (a[0] * a[1]));
    float4 endz = float4(z[0] + Timestep * z[2], 
                        z[1] + Timestep * z[3], 
                        Friction * (z[2] + Timestep*g1), 
                        Friction * (z[3] + Timestep*g2));
    return endz;
}
float3 HSVToRGB(float3 input)
{
    float C = input[2] * input[1];
    float M = input[2] - C;
    float X = C * (1 - abs(fmod(input[0] / 60.0, 2) - 1));
    float H = input[0];

    float3 L;
    if (0 <= H < 60)
    {
        L = float3(C, X, 0.0);
    }
    else if (H < 120)
    {
        L = float3(X, C, 0.0);
    }
    else if (H < 180)
    {
        L = float3(0.0, C, X);
    }
    else if (H < 240)
    {
        L = float3(0.0, X, C);
    }
    else if (H < 300)
    {
        L = float3(X, 0.0, C);
    }
    else if (H <= 360)
    {
        L = float3(C, 0.0, X);
    }

    float3 p = float3(L[0] + M, L[1] + M, L[2] + M);

    return p;
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float PI = 3.1415926545363;
    float startparam1 = ((id.x / Resolutionx) - .5) * 2 * PI;
    float startparam2 = ((id.y / Resolutiony) - .5) * 2 * PI;
    float x = 0.0;
    float y = 0.0;
    float z = 0.0;
    float w = 0.0;

    if (XAxisType == 0)
    {
        x = startparam1;
    }
    if (XAxisType == 1)
    {
        y = startparam1;
    }
    if (XAxisType == 2)
    {
        z = startparam1;
    }
    if (XAxisType == 3)
    {
        w = startparam1;
    }

    if (YAxisType == 0)
    {
        x = startparam2;
    }
    if (YAxisType == 1)
    {
        y = startparam2;
    }
    if (YAxisType == 2)
    {
        z = startparam2;
    }
    if (YAxisType == 3)
    {
        w = startparam2;
    }
    float4 Ne = float4(x, y, z, w);
    for (int i=1; i<Time; i++)
    {
        Ne = Iterat(Ne);
    }
    float3 fincol = HSVToRGB(float3(Ne.x / 8, 1.0, Ne.y + PI));
    Result[id.xy] = float4(fincol, 0.0);
}
